# Slightly modified from https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile
# https://www.youtube.com/watch?v=aNh8iShFXto - Official Docker YouTube video

# Install dependencies only when needed
FROM node:20-alpine AS deps

ENV NODE_ENV=production

# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine
# to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat

WORKDIR /code

COPY ./frontend/package.json ./frontend/package-lock.json ./
# npm ci bypasses a package’s package.json to install modules from a package’s lockfile.
# This ensures reproducible builds—you are getting exactly what you expect on every install.
RUN npm ci

# Rebuild the source code only when needed - this is the layer that builds our production application
FROM node:20-alpine AS builder

ENV NODE_ENV=production

# Next.js collects completely anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
# Uncomment the following line in case you want to disable telemetry during the build.
# ENV NEXT_TELEMETRY_DISABLED 1

WORKDIR /code

COPY ./frontend/next.config.js ./
COPY ./frontend/package.json ./frontend/package-lock.json ./
COPY --from=deps /code/node_modules ./node_modules

COPY ./frontend .

RUN npm run build

# Production image, copy all the files and run next
FROM node:20-alpine AS runner
WORKDIR /code

ENV NODE_ENV=production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# You only need to copy next.config.js if you are NOT using the default configuration
# COPY --from=builder /app/next.config.js ./
COPY --from=builder /code/public ./public

COPY --from=builder --chown=nextjs:nodejs /code/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /code/.next/static ./.next/static

# Create a new user instead of using the root user for security measures
USER nextjs

CMD ["node", "server.js"]
